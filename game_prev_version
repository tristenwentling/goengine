#include <cstdlib>
#include <cstring>
#include <iostream>
#include <string>
#include <vector>
#include <map>

using namespace std;

const int MAXLINE=256;


// @main functions
int Dprotocol_version(){
//return version used of Go Text Protocol as int
    return 2;
}

string Dname(){
//return name of engine as string
    return "Ender's Go Engine";
}

string Dversion(){
//return version number of engine as string
    return "1.0";
}

bool Dknown_command(string command){
//check whether a command is known, returns boolean value
    bool value = false;
    map<string, bool> com_list;
    com_list["protocol_version"] = true;
    com_list["name"] = true;
    com_list["version"] = true; 
    com_list["known_command"] = true;
    com_list["list_commands"] = true;
    com_list["quit"] = true;
    com_list["boardsize"] = true;
    com_list["clear_board"] = true;
    com_list["komi"] = true;
    com_list["play"] = true;
    com_list["genmove"] = true;
    if (com_list.find(command) != com_list.end()){
        value = com_list[command];
    }
    return value;
}

string Dlist_commands(){
    string comm = "protocol_version\nname\nversion\nknown_command\nlist_commands\nquit\nboardsize\nclear_board\nkomi\nplay\ngenmove";
    return comm;
}

void Dkomi(){
//reset board to size int size
    bool wtf = false;
}
void Dclear_board(){
//reset board to empty, reset captured stones, empty move history
    bool wtf = false;
}

void Dplay(string move){
//play stone of given color at given vertex
    bool wtf = false;
}

void Dgenmove(string move){
//generate move of given color, pass and resign are valid returns in
//  place of returning the vertex of the move 
    bool wtf = false;
}


int main(){
    map<string, int> comm_list;
    comm_list["protocol_version"] = 1;
    comm_list["name"] = 2;
    comm_list["version"] = 3; 
    comm_list["known_command"] = 4;
    comm_list["list_commands"] = 5;
    comm_list["boardsize"] = 6;
    comm_list["clear_board"] = 7;
    comm_list["komi"] = 8;
    comm_list["play"] = 9;
    comm_list["genmove"] = 10;
    
    bool playing = true;
    
    while (playing){
        string data_vec[] = {"a","a"};
        char oneline[MAXLINE], *p;
        cin >> oneline;
        //cout << oneline << endl; //input test
        if ((string)oneline == (string)"quit"){
            playing = false;
        }
        else if ((string)oneline == (string)"help"){
            string all = Dlist_commands();
            cout << "Command list" << endl;
            cout << "============" << endl;
            cout << all << endl;
        }
        else{
            p = strtok(oneline," ");
            int i=0;
            string command = "";
            string parameter = "";
            while (p != NULL){
                string token = "";
                token += p;
                data_vec[i] = token ;
                cout << data_vec[i];
                p = strtok(NULL, " ");
            }
            if (data_vec[1] != "a"){
                parameter = data_vec[1];
                cout << "Hooray, it is working up to this point" << "--line" << 116 << endl;
            }
            command = data_vec[0];
            if (Dknown_command(command)){
                switch(comm_list[command]){
                    case 1:
                        cout << Dprotocol_version() << endl;break;
                    case 2:
                        cout << Dname() << endl;break;
                    case 3:
                        cout << Dversion() << endl;break;
                    case 4:
                        cout << Dname() << endl;break; //add Dknown_command
                    case 5:
                        cout << Dlist_commands() << endl;break;
                    case 6:
                        cout << Dname() << endl;break;
                    case 7:
                        cout << Dname() << endl;break;
                    case 8:
                        cout << Dname() << endl;break;
                    case 9:
                        cout << Dname() << endl;break;
                    case 10:
                        cout << Dname() << endl;break;
                    default:
                        cout << "Unknown command" << endl;break;
                }
                /*
                name = 2,
                 version = 3,
                 known_command = 4,
                 list_commands = 5,
                 quit = 6,
                 boardsize = 7,
                 clear_board = 8,
                 komi = 9,
                 play = 10,
                 gen_move = 11}
                */
            }
        }
    }
    cout << "Thanks for playing, goodbye!" << endl;
}//end main


