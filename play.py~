from __future__ import division
from random import randint
from board import Board
from time import time


class Go_Game(object):
    """creates a basic game of computer Go"""

    def __init__(self, size=9):
        """initialize a board and create actions on it"""
        self._cur_game_size = size
        self._cur_game = Board(size)
        self._flag = True
        self._komi = 0

    def opp_move(self):
        """make opponent move"""
        pass

    def comp_move(self):
        """self generate move"""
        pass

    def check_move_validity(self):
        """check whether a move is valid"""
        pass

#  ________________all commands below are required by GTP_____________________
    def protocol_version(self):
        "return version used of Go Text Protocol as int"  #           (working)
        return 2

    def name(self):
        "return name of engine as string"  #                          (working)
        return "PynamiGo"

    def version(self):
        "return version number of engine as string"  #                (working)
        return "1.0"

    def known_command(self, command ):
        "check whether a command is known"  #                         (working)
        commands = ['protocol_version',  #    X
                    'name',  #                X
                    'version',  #             X
                    'known_command',  #       X
                    'list_commands',  #       X
                    'quit',  #                X
                    'boardsize',
                    'clear_board',
                    'komi',
                    'play',
                    'genmove']
        if command in commands:
            return True
        else:
            return False

    def list_commands(self):
        "return a list of commands, one per line"  #                  (working)
        commands = ['protocol_version',
                    'name',
                    'version',
                    'known_command',
                    'list_commands',
                    'quit',
                    'boardsize',
                    'clear_board',
                    'komi',
                    'play',
                    'genmove']
        coms = ""
        for i in xrange(len(commands)):
            coms += commands[i] + '\n'
        return coms

    def quit(self):
        "quit game"
        self._flag = False

    def boardsize(self, size):
        "reset board to size int size"""
        self._cur_game_size = size
        self._cur_game = Board(size)

    def clear_board(self):
        """reset board to empty, reset captured stones, empty move history"""
        self._cur_game = Board(self._cur_game_size)

    def komi(self, new_komi):
        """change komi"""
        self._komi = new_komi

    def play(self, move):
        """play stone of given color at given vertex"""
        pass

    def genmove(self, color):
        """generate move of given color, pass and resign are valid returns in 
            place of returning the vertex of the move"""
        pass
    def run_engine(self):
        """runs the game engine until quit response received or timeout occurs"""
        last_move_time = time()
        while (self._flag):
            if ((time()-last_move_time) > 100):
                self._flag = False
            
